# Tool version: clang-format 9.0.0-2
---

UseTab: Never
TabWidth: 4
IndentWidth: 4
ContinuationIndentWidth: 4
ColumnLimit: 100

# C Language specifics
Language: Cpp

# The extra indent or outdent of access modifiers, e.g. public:.
# If value of AccessModifierOffset is equal to value of IndentWidth,
# then access modifier keywords will always be placed on the initial
# column of the scope, i.e.:
# class testExample() {
# public:
#     classMember1;
#     classMember2;
# private:
#     classMember3;
# }
AccessModifierOffset: -4

# Align parameters on the open bracket
# someLongFunction(argument1,
#                  argument2);
AlignAfterOpenBracket: Align

# Align consecutive C/C++ preprocessor macros.
# #define SHORT_NAME       42
# #define LONGER_NAME      0x007f
# #define EVEN_LONGER_NAME (2)
# #define foo(x)           (x * x)
AlignConsecutiveMacros: true

# Align consecutive assignments
# int aaaa = 12;
# int b    = 14;
AlignConsecutiveAssignments: true

# Align consecutive declarations
# int    aaaa = 12;
# double b = 3.14;
AlignConsecutiveDeclarations: true

# Align escaped newlines as far left as possible
# #define A   \
#   int aaaa; \
#   int b;    \
#   int cccccccc;
AlignEscapedNewlines: Left

# Align operands of binary and ternary expressions
# int aaa = bbbbbbbbbbb +
#           cccccc;
AlignOperands: true

# Don't align trailing comments
# int a; // Comment a
# int b = 2; // Comment b
AlignTrailingComments: true

# Don't allow all arguments on the next line if they don't fit on the current line.
# callFunction(a,
#              b,
#              c,
#              d);
AllowAllArgumentsOnNextLine: false

# If they don't fit, put initializers each on its own line.
# MyClass::MyClass() :
#     member0(0),
#     member1(2) {}
AllowAllConstructorInitializersOnNextLine: false

# By default don't allow putting parameters onto the next line
# myFunction(foo, bar, baz);
AllowAllParametersOfDeclarationOnNextLine: false

# Don't allow short braced statements to be on a single line
# if (a)           not       if (a) return;
#   return;
AllowShortBlocksOnASingleLine: false
AllowShortCaseLabelsOnASingleLine: false
AllowShortFunctionsOnASingleLine: None
AllowShortIfStatementsOnASingleLine: Never
AllowShortLambdasOnASingleLine: None
AllowShortLoopsOnASingleLine: false

# By default don't add a line break after the return type of top-level functions
# int foo();
AlwaysBreakAfterReturnType: All

# Don't break before multiline string literals.
# aaaa = "bbbb"
#        "cccc";
AlwaysBreakBeforeMultilineStrings: false

# Always break after template declaration.
# template <typename T>
# T foo() {
# }
# template <typename T>
# T foo(int aaaaaaaaaaaaaaaaaaaaa,
#       int bbbbbbbbbbbbbbbbbbbbb) {
# }
AlwaysBreakTemplateDeclarations: Yes

# Function call's arguments will either be all on the same line or will have one line each.
# int myFunction(int aaaaaaaaaaaa,
#				 int bbbbbbbb,
#                int cccc);
BinPackArguments: false
BinPackParameters: false

# Select premade or custom individual brace wrapping cases.
BreakBeforeBraces: Custom

# Set individual brace wrapping cases.
BraceWrapping:
  # Use compact case braces.
  # switch (foo) {
  #   case 1: {
  #     bar();
  #     break;
  #   }
  #   default: {
  #     plop();
  #   }
  # }
  AfterCaseLabel: true

  # Break before class body.
  # class foo
  # {};
  AfterClass: true

  # Don't break before opening brace of control statement.
  # if (foo()) {
  # } else {
  # }
  # for (int i = 0; i < 10; ++i) {
  # }
  AfterControlStatement: true

  # Don't break after enum keyword
  # enum X : int { B };
  AfterEnum: true



  # Break after function declaration.
  # void foo()
  # {
  #   bar();
  #   bar2();
  # }
  AfterFunction: true

  # Break after namespace keyword
  # namespace
  # {
  # int foo();
  # int bar();
  # }
  AfterNamespace: true

  # Keep structs compact.
  # struct foo {
  #   int x;
  # };
  AfterStruct: true

  # Keep unions compact.
  # union foo {
  #   int x;
  # }
  AfterUnion: true

  # Keep extern blocks compact.
  # extern "C" {
  # int foo();
  # }
  AfterExternBlock: true

  # Keep Try/Catch compact.
  # try {
  #   foo();
  # } catch () {
  # }
  BeforeCatch: true

  # Keep If/Else compact.
  # if (foo()) {
  # } else {
  # }
  BeforeElse: true

  # Don't indent wrapped braces.
  IndentBraces: false

  # Put empty function body on single line.
  # int f()
  # {}
  SplitEmptyFunction: true

  # Put an empty record (class, struct, union) body on a single line.
  # class foo()
  # {}
  SplitEmptyRecord: true

  # Put an empty namespace body on a single line.
  # namespace foo
  # {}
  SplitEmptyNamespace: true

# Break after operators
# int value = aaaaaaaaaaaaa +
#              bbbbbb -
#              ccccccccccc;
BreakBeforeBinaryOperators: None

# Break before ternary operators
# veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongDescription
#     ? firstValue
#     : SecondValueVeryVeryVeryVeryLong;
BreakBeforeTernaryOperators: true

# Break constructor initializers before the colon and after the commas.
# Constructor()
#     : initializer1(),
#       initializer2()
BreakConstructorInitializers: BeforeColon

# Break inheritance list before the colon and after the commas.
# class Foo
#     : Base1,
#       Base2
# {};
BreakInheritanceList: BeforeColon

# Break string literals
BreakStringLiterals: true

# A regular expression that describes comments with special meaning,
# which should not be split into lines or otherwise changed.
CommentPragmas:  '\/\*.*\*\/'					# Make clang recognize doxygen-style comments /**< */

# Each namespace is declared on a new line.
# namespace Foo {
# namespace Bar {
# }
# }
CompactNamespaces: false

# If the constructor initializers don't fit on a line, put each initializer on its own line.
# SomeClass::Constructor()
#     : aaaaaaaa(aaaaaaaa), aaaaaaaa(aaaaaaaa),
#       aaaaaaaa(aaaaaaaaaaaaaaaaaaaaaaaaa) {
#   return 0;
# }
ConstructorInitializerAllOnOneLineOrOnePerLine: true

# The number of characters to use for indentation of constructor initializer lists as well as inheritance lists.
ConstructorInitializerIndentWidth: 8

# Don't insert a space after '{' and before '}' in struct initializers
Cpp11BracedListStyle: true

# Don't infer file alignment preferences.
DerivePointerAlignment: false

# Don't disable formatting.
DisableFormat: false

# clang-format adds missing namespace end comments and fixes invalid existing ones.
# namespace a {
# foo();
# } // namespace a
FixNamespaceComments: true

# A list of macros that should be interpreted as foreach loops instead of as
# function calls. Taken from:
#   git grep -h '^#define [^[:space:]]*for_each[^[:space:]]*(' \
#   | sed "s,^#define \([^[:space:]]*for_each[^[:space:]]*\)(.*$,  - '\1'," \
#   | sort | uniq
ForEachMacros:
  - 'for_each_abbrev'
  - 'for_each_builtin'
  - 'for_each_string_list_item'
  - 'for_each_ut'
  - 'for_each_wanted_builtin'
  - 'list_for_each'
  - 'list_for_each_dir'
  - 'list_for_each_prev'
  - 'list_for_each_prev_safe'
  - 'list_for_each_safe'

# A vector of macros that should be interpreted as foreach loops instead of as function calls.
ForEachMacros:   [ foreach, Q_FOREACH, BOOST_FOREACH ]

# Merge multiple #include blocks together and sort as one,
# then split into groups based on category priority.
# #include "a.h"
# #include "b.h"
#
# #include <lib/main.h>
IncludeBlocks: Regroup

# Regular expressions denoting the different #include categories used for ordering #includes.
IncludeCategories:
  - Regex:           '^(<|"(gtest|gmock|isl|json)/)'
    Priority:        3
  - Regex:           '<[[:alnum:].]+>'
    Priority:        4
  - Regex:           '.*'
    Priority:        1

# Switch statement body is always indented one level more than case labels.
IndentCaseLabels: true

# Indent directives before the hash.
# #if FOO
#   #if BAR
#     #include <foo>
#   #endif
# #endif
IndentPPDirectives: AfterHash

# Indent a function definition or declaration if it is wrapped after the type
IndentWrappedFunctionNames: false

# No empty line at the start of a block.
KeepEmptyLinesAtTheStartOfBlocks: false

# The maximum number of consecutive empty lines to keep.
MaxEmptyLinesToKeep: 1

# Don't indent in namespaces.
# namespace out {
# int i;
# namespace in {
# int i;
# }
# }
NamespaceIndentation: None

# Penalties
# This decides what order things should be done if a line is too long
PenaltyBreakAssignment: 10
PenaltyBreakBeforeFirstCallParameter: 30
PenaltyBreakComment: 10
PenaltyBreakFirstLessLess: 0
PenaltyBreakString: 10
PenaltyExcessCharacter: 100
PenaltyReturnTypeOnItsOwnLine: 60

# Align pointer to the left
# int* a;
PointerAlignment: Left

# Don't reflow comments, leave them long.
# // veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongComment with plenty of information
# /* second veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongComment with plenty of information */
ReflowComments: true

# Don't sort #include's
SortIncludes: true

# Sort the lists of declarations lexicographically.
SortUsingDeclarations: true

# Don't insert a space after a cast
# x = (int32)y;    not    x = (int32) y;
SpaceAfterCStyleCast: false

# Don't insert space after logical not
# !someExpression();
SpaceAfterLogicalNot: false

# Don't insert space after 'template' keyword
# template<int> void foo();
SpaceAfterTemplateKeyword: false

# Insert spaces before and after assignment operators
# int a = 5;    not    int a=5;
# a += 42;             a+=42;
SpaceBeforeAssignmentOperators: true

# Insert space before braced list used to initialize an object
# Foo foo { bar };
# Foo {};
# vector<int> { 1, 2, 3 };
# new int[3] { 1, 2, 3 };
SpaceBeforeCpp11BracedList: true

# Insert space before constructor initializer colon
# Foo::Foo() : a(a) {}
SpaceBeforeCtorInitializerColon: true
# Insert space before inheritance colon
# class Foo : Bar {}
SpaceBeforeInheritanceColon: true

# Put a space before opening parentheses only after control statement keywords.
# void f() {
#   if (true) {
#     f();
#   }
# }
SpaceBeforeParens: ControlStatements

# Insert space before range-based for loop colon
# for (auto v : values) {}
SpaceBeforeRangeBasedForLoopColon: true

# Don't insert spaces inside empty '()'
SpaceInEmptyParentheses: false

# The number of spaces before trailing line comments (// - comments).
# This does not affect trailing block comments (/* - comments).
SpacesBeforeTrailingComments: 1

# Don't insert space after < and before > in template argument lists
# static_cast<int>(arg);
# std::function<void(int)> fct;
SpacesInAngles: false

# Don't insert spaces in casts
# x = (int32) y;    not    x = ( int32 ) y;
SpacesInCStyleCastParentheses: false

# Don't insert spaces inside container literals
# var arr = [1, 2, 3];    not    var arr = [ 1, 2, 3 ];
SpacesInContainerLiterals: false

# Don't insert spaces after '(' or before ')'
# f(arg);    not    f( arg );
SpacesInParentheses: false

# Don't insert spaces after '[' or before ']'
# int a[5];    not    int a[ 5 ];
SpacesInSquareBrackets: false
